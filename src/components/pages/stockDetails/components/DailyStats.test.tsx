import { render, screen, waitFor } from '@testing-library/react';
import { StatusCodes } from 'http-status-codes';

import { GlobalProviders } from 'components/app/GlobalProviders';

import { pageContext, State } from '../state';
import { DailyStats } from './DailyStats';

/* 
  Downsides:
    -  difficult typing, which leads to no typing at all
    -  could introduce impossible states, because it's not generated by the library(eg: react-query)  
*/

describe('<DailyStats />', () => {
  test('renders loading when isFetching', async () => {
    const mockData = {
      dailyStatsState: {
        isFetching: true,
      },
    };

    renderWithProviders(mockData);

    expect(screen.getByText(/loading.../i)).toBeInTheDocument();
  });

  test('renders daily open/close stats', async () => {
    const mockData = {
      dailyStatsState: {
        data: {
          open: 130,
          high: 150,
          low: 120,
          close: 140,
          volume: 222,
        },
      },
    };

    renderWithProviders(mockData);

    const openEl = screen.getByText(mockData.dailyStatsState.data.open);
    const closeEl = screen.getByText(mockData.dailyStatsState.data.close);
    const highEl = screen.getByText(mockData.dailyStatsState.data.high);
    const lowEl = screen.getByText(mockData.dailyStatsState.data.low);
    const volumeEl = screen.getByText(mockData.dailyStatsState.data.volume);

    expect(openEl).toBeInTheDocument();
    expect(closeEl).toBeInTheDocument();
    expect(highEl).toBeInTheDocument();
    expect(lowEl).toBeInTheDocument();
    expect(volumeEl).toBeInTheDocument();
  });

  test('renders error msg', async () => {
    const expectedErrorMsg = 'Data not found';
    const mockData = {
      dailyStatsState: {
        isError: true,
        error: {
          response: {
            status: 404,
            data: {
              error: expectedErrorMsg,
            },
          },
        },
      },
    };

    renderWithProviders(mockData);

    const errorMsgEl = await waitFor(() => screen.getByText(expectedErrorMsg));

    expect(errorMsgEl).toBeInTheDocument();
  });

  test('renders try-again btn on TOO_MANY_REQUESTS error', async () => {
    const expectedErrorMsg = 'too many requests';
    const mockData = {
      dailyStatsState: {
        isError: true,
        error: {
          response: {
            status: StatusCodes.TOO_MANY_REQUESTS,
            data: {
              error: expectedErrorMsg,
            },
          },
        },
      },
    };

    renderWithProviders(mockData);

    const errorMsgEl = screen.getByText(expectedErrorMsg);
    const tryAgainBtnEl = screen.getByTestId('refetch-daily-stats');

    expect(errorMsgEl).toBeInTheDocument();
    expect(tryAgainBtnEl).toBeInTheDocument();
  });
});

function renderWithProviders(mockData: any) {
  return render(
    <GlobalProviders>
      <pageContext.Provider value={mockData as State}>
        <DailyStats />
      </pageContext.Provider>
    </GlobalProviders>
  );
}
